<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[万建伟's Blog]]></title>
  <subtitle><![CDATA[从心所愿]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-02-18T09:55:41.847Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[万建伟]]></name>
    <email><![CDATA[157084672@qq.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[MySQL的事物及回滚简述]]></title>
    <link href="http://yoursite.com/2016/02/18/MySQL%E7%9A%84%E4%BA%8B%E7%89%A9%E5%8F%8A%E5%9B%9E%E6%BB%9A%E7%AE%80%E8%BF%B0/"/>
    <id>http://yoursite.com/2016/02/18/MySQL的事物及回滚简述/</id>
    <published>2016-02-18T08:59:11.000Z</published>
    <updated>2016-02-18T09:55:41.847Z</updated>
    <content type="html"><![CDATA[<h3 id="u4F55_u4E3A_u4E8B_u52A1"><a href="#u4F55_u4E3A_u4E8B_u52A1" class="headerlink" title="何为事务"></a>何为事务</h3><p>　事务是指逻辑上的一组操作，组成这组操作的各个单元，要不全成功要不全失败。 MySQL数据库的事务默认是自动提交的， 也就是发一条 sql 它就执行一条。如果想多条 sql 放在一个事务中执行，则需要使用事务进行处理。当我们开启一个事务，并且没有提交，mysql 会自动回滚事务。或者我们使用 rollback 命令手动回滚事务。   </p>
<a id="more"></a>   
<h3 id="u4F55_u4E3A_u56DE_u6EDA"><a href="#u4F55_u4E3A_u56DE_u6EDA" class="headerlink" title="何为回滚"></a>何为回滚</h3><p>　回滚的意思是如果之前是插入操作，那么会执行删除插入的记录，如果之前是update操作，也会执行update操作将之前的记录还原。在MySQL中，存储引擎为InnoDB的可以支持事务回滚，而MyISAM存储类型不支持。（可使用“ALTER TABLE 表名 ENGINE = InnoDB”sql语句修改）；   </p>
<h3 id="u4E8B_u52A1_u5904_u7406_u64CD_u4F5C"><a href="#u4E8B_u52A1_u5904_u7406_u64CD_u4F5C" class="headerlink" title="事务处理操作"></a>事务处理操作</h3><ul>
<li><strong>1、用START TRANSACTION/BEGIN，ROOLBACK，COMMIT来实现</strong></li>
</ul>
<blockquote>
<p>　START TRANSACTION/BEGIN用来开始一个事务；<br>　ROOLBACK用于事务失败后进行手动回滚；<br>　COMMIT用于事务确认及提交；   </p>
</blockquote>
<ul>
<li><strong>2、直接用set来改变MySQL的自动提交模式</strong>      </li>
</ul>
<blockquote>
<p>　MySQL默认是自动提交事务的，也就是我们提交一个query，它就直接执行!因此，我们可以通过以下命令来实现事务的处理<br>　set autocommit = 0 禁止自动提交；<br>　set autocommit = 1 开启自动提交；   </p>
</blockquote>
<p>　当你用 set autocommit=0 的时候，你以后所有的SQL都将做为事务处理，直到你用commit确认或rollback结束。注意当你结束这个事务的同时也开启了个新的事务！按第一种方法只将当前的作为一个事务！   </p>
<ul>
<li><strong>3、保存点</strong>   </li>
</ul>
<p>　通过保存点机制:用户可以在事物里用<strong>savepoint name</strong>命令设置一些保存点,以后用户在使用<strong>rollback to savepoint name</strong>结束事物时，name之前的数据保存，之后的数据不保存   </p>
<p><strong>保存点注意</strong>   </p>
<blockquote>
<p>1、只能取消到某个保存点 rollback to savepoint p1；<br>2、不能提交某个保存 commit to savepoint p2//错误写法<br>3、最后commit 把未取消的保存点提交到数据   </p>
</blockquote>
<p><img src="http://7xqrxz.com1.z0.glb.clouddn.com/mysql%E4%B9%8B%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86.jpg" alt="事务处理"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u4F55_u4E3A_u4E8B_u52A1"><a href="#u4F55_u4E3A_u4E8B_u52A1" class="headerlink" title="何为事务"></a>何为事务</h3><p>　事务是指逻辑上的一组操作，组成这组操作的各个单元，要不全成功要不全失败。 MySQL数据库的事务默认是自动提交的， 也就是发一条 sql 它就执行一条。如果想多条 sql 放在一个事务中执行，则需要使用事务进行处理。当我们开启一个事务，并且没有提交，mysql 会自动回滚事务。或者我们使用 rollback 命令手动回滚事务。   </p>]]>
    
    </summary>
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
      <category term="MySQL数据库开发" scheme="http://yoursite.com/categories/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MySQL数据库学习笔记]]></title>
    <link href="http://yoursite.com/2016/02/17/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2016/02/17/MySQL数据库学习总结/</id>
    <published>2016-02-17T06:35:23.000Z</published>
    <updated>2016-02-17T12:58:05.443Z</updated>
    <content type="html"><![CDATA[<h3 id="u5E38_u7528_u5B57_u6BB5_u7C7B_u578B_28type_29"><a href="#u5E38_u7528_u5B57_u6BB5_u7C7B_u578B_28type_29" class="headerlink" title="常用字段类型(type)"></a>常用字段类型(type)</h3><p>MySQL中的数据类型大致可分为：日期和时间，数值以及字符串。各类型的详细介绍如下所示   </p>
<ul>
<li><strong>日期和时间数据类型</strong>   </li>
</ul>
<blockquote>
<p><img src="http://7xqrxz.com1.z0.glb.clouddn.com/mysql%E4%B9%8B%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4.jpg" alt="日期时间">   </p>
</blockquote>
<a id="more"></a>   
<ul>
<li><strong>数值数据类型</strong>   </li>
</ul>
<blockquote>
<p><img src="http://7xqrxz.com1.z0.glb.clouddn.com/mysql%E4%B9%8B%E6%95%B4%E5%9E%8B%E7%B1%BB%E5%9E%8B.jpg" alt="整型">   </p>
<p><img src="http://7xqrxz.com1.z0.glb.clouddn.com/mysql%E4%B9%8B%E6%B5%AE%E7%82%B9%E7%B1%BB%E5%9E%8B.jpg" alt="浮点">   </p>
</blockquote>
<p>　<strong>注意：</strong>如果我们将字段定义为浮点型时，要注意定义时的浮点精度。比如我们将字段的类型定义为：float（6，3）；数据库存储该字段值则是整数占３位，小数占３位，可参看如下测试案例：<br>　1、插入123.111，最后查询到的结果是123.111；<br>　2、插入1111.12，最后查询到的结果是999.120；<br>　3、插入12.1234，最后查询到的结果是12.123；   </p>
<ul>
<li><strong>字符串数据类型</strong>   </li>
</ul>
<blockquote>
<p><img src="http://7xqrxz.com1.z0.glb.clouddn.com/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B.jpg" alt="字符串类型">   </p>
</blockquote>
<p>　<strong>说明：</strong><br>　１、char（n）和varchar（n）中括号中的n代表字符的个数，而不是字节的个数，所以当使用了中文的时候(UTF8编码格式)意味着可以插入m个中文，但是实际会占用m*3个字节；<br>　2、char和varchar最大的区别就在于char不管实际value都会占用n个字符的空间，而varchar只会占用实际字符应该占用的空间+1，并且实际空间+1&lt;=n；<br>　3、超过char和varchar的n设置后，字符串会被截断；<br>　4、char的上限是255个字节，varchar的上限为65535字节，text的上限同样为65535个字节；<br>　5、char在存储的时候会截断尾部的空格，varchar和text不会；<br>　6、varchar会使用1~3个字节来存储长度，text不会；   </p>
<ul>
<li><strong>其它类型</strong>   </li>
</ul>
<p>　1、enum（“member1”，“member2”，….”memeberN”）<br>　enum数据类型就是定义一种枚举，最多包含65535个不同的成员，字段的值限制为枚举中的值。如果字段属性声明包含NULL属性，则NULL将被认为是一个有效值，并且是默认值，如果声明了NOT NULL属性，则枚举的第一个成员是默认值；   </p>
<h3 id="u5E38_u7528_u5B57_u6BB5_u5C5E_u6027"><a href="#u5E38_u7528_u5B57_u6BB5_u5C5E_u6027" class="headerlink" title="常用字段属性"></a>常用字段属性</h3><ul>
<li>1、auto_increment   </li>
</ul>
<p>　auto_increment能为表中新插入的记录赋一个唯一的整数标识符。为字段赋此属性，字段值会在表中新插入一条记录后再原来的值基础上自动加1。</p>
<p>　MySQL要求将auto_increment属性用于作为主键的列。   </p>
<ul>
<li>2、binary   </li>
</ul>
<p>　binary属性只用于char和varchar值。当为字段指定了该属性时，将以区分大小写的方式排序。与之相反，忽略binary属性时，将使用不区分大小写的方式排序。例如：  </p>
<blockquote>
<p>　hostname char(25) binary not null   </p>
</blockquote>
<ul>
<li>3、default   </li>
</ul>
<p>　default属性确保在任何值可用的情况下，赋予某个常量值，因为MySQL不允许插入函数或表达式值。此属性无法用于类型为BLOB或text字段。   </p>
<ul>
<li>4、not null</li>
</ul>
<p>　如果将一个字段定义为not null，将不允许向该字段插入null值。建议在重要情况下始终使用not null属性，因为它提供一个基本验证，确保已经向查询传递了所有必要的值，<strong>字段的默认属性是not null</strong>。   </p>
<ul>
<li>5、null   </li>
</ul>
<p>　为字段指定null属性时，该列可以保持为空，而不论行中其它字段是否填充，注意：null的准确说法是“无”，而不是空字符串或0。, 判断值是否等于NULL，不能简单用=，因为任何数跟NULL进行运算都是NULL，而要用IS NULL关键字。   </p>
<ul>
<li>6、primary key   </li>
</ul>
<p>　primary key属性用于确保指定行的唯一性。指定为主键的字段，其值不能重复，也不能为空。为指定为主键的字段赋予auto_increment属性是很常见的，因为此字段不必与行数据有任何关系，而只是作为一个唯一标识符。   </p>
<ul>
<li>7、unique   </li>
</ul>
<p>　被赋予unique属性的字段将确保所有值都有不同的值，<strong>如果该字段设置可为null，则null值可以重复</strong>。一般会指定一个列为unique，以确保该列的所有值都不同。   </p>
<ul>
<li>8、zerofill</li>
</ul>
<p>　zerofill属性可用于任何数值类型，用0填充所有剩余字段空间。例如，无符号int的默认宽度是10；因此，当“零填充”的int值为4时，将表示它为0000000004。例如：   </p>
<blockquote>
<p>　orderid int unsigned zerofill not null   </p>
</blockquote>
<ul>
<li>9、unsigned   </li>
</ul>
<p>　unsigned 属性只针对整型，而binary属性只用于char 和varchar。采用unsigned声明的类型为int的字段，取值范围为0到4294967295，正好可用于表示unix时间戳，时间范围到了2016年；一般unix时间戳都采用unsigned　int表示；   </p>
<hr>
<h3 id="ALTER_TABLE_u2026-ADD_u547D_u4EE4"><a href="#ALTER_TABLE_u2026-ADD_u547D_u4EE4" class="headerlink" title="ALTER TABLE….ADD命令"></a>ALTER TABLE….ADD命令</h3><ul>
<li>1、添加索引</li>
</ul>
<blockquote>
<p>　mysql&gt;alert table 表名 add index 索引名 (字段名1[,字段名2…])；<br>　eg：mysql&gt;alter table table1 add index index_1(name)；   </p>
</blockquote>
<ul>
<li>2、添加主关键字索引</li>
</ul>
<blockquote>
<p>　mysql&gt;alter table 表名 add primary key(字段名)；<br>　eg：mysql&gt;alter table table1 add primary key(id)；   </p>
</blockquote>
<ul>
<li>3、添加唯一限制条件的索引   </li>
</ul>
<blockquote>
<p>　mysql&gt;alert table 表名 add unique 索引名(字段名)；<br>　eg：mysql&gt;alter table table1 add unique unique_1(username)；   </p>
</blockquote>
<ul>
<li>4、添加外键</li>
</ul>
<blockquote>
<p>　mysql&gt;ALTER TABLE 表名 ADD CONSTRAINT 外键名 FOREIGN KEY(外键字段名) REFERENCES 主表名(主表主键名) [ON DELETE {RESTRICT|CASCADE|SET NULL|NO ACTION}] [ON UPDATE {RESTRICT|CASCADE|SET NULL|NO ACTION}]；<br>　eg：mysql&gt;alter table table1 add constraint fk_wan foreign key(userId) on delete cascade on update cascade；   </p>
</blockquote>
<ul>
<li>5、添加字段</li>
</ul>
<blockquote>
<p>　mysql&gt;ALTER TABLE 表名 ADD 字段名 字段类型 字段属性 AFTER 字段名；<br>　eg：alert table table1 add password varchar(20) not null after username；   </p>
</blockquote>
<h3 id="ALTER_TABLE__u2026DROP_u547D_u4EE4"><a href="#ALTER_TABLE__u2026DROP_u547D_u4EE4" class="headerlink" title="ALTER TABLE …DROP命令"></a>ALTER TABLE …DROP命令</h3><ul>
<li>1、删除索引</li>
</ul>
<blockquote>
<p>　mysql&gt;ALTER TABLE 表名 DROP INDEX 索引名；<br>　eg：mysql&gt;alter table table1 drop index index_1;   </p>
</blockquote>
<ul>
<li>2、删除主键</li>
</ul>
<blockquote>
<p>　mysql&gt;ALTER TABLE 表名 DROP PRIMARY KEY；<br>　eg：mysql&gt;alter table table1 drop primary key；   </p>
</blockquote>
<ul>
<li>3、删除唯一索引  </li>
</ul>
<blockquote>
<p>　mysql&gt;ALTER TABLE 表名 DROP UNIQUE 唯一索引名；<br>　eg：mysql&gt;alter table table1 drop unique unique_1；   </p>
</blockquote>
<ul>
<li>4、删除外键   </li>
</ul>
<blockquote>
<p>　mysql&gt;ALTER TABLE 表名 DROP FOREIGN KEY 外键名；<br>　eg：mysql&gt;alter table table1 drop foreign key FK_1；   </p>
</blockquote>
<ul>
<li>5、删除字段   </li>
</ul>
<blockquote>
<p>　mysql&gt;ALTER TABLE 表名 DROP [COLUMN] 字段名；<br>　eg：mysql&gt;alter table table1 drop username；   </p>
</blockquote>
<h3 id="u91CD_u547D_u540D_u547D_u4EE4"><a href="#u91CD_u547D_u540D_u547D_u4EE4" class="headerlink" title="重命名命令"></a>重命名命令</h3><ul>
<li>1、更改字段名  </li>
</ul>
<blockquote>
<p>　mysql&gt;ALTER TABLE 表名 CHANGE 原字段名 现字段名 字段类型 字段属性；<br>　eg：mysql&gt;alter table table1 change name username varchar(24) not null；</p>
</blockquote>
<ul>
<li>2、更改表名  </li>
</ul>
<blockquote>
<p>　mysql&gt;ALTER TABLE 表名 RENAME 新表名；<br>　eg：mysql&gt;alter table table1 rename table2；   </p>
</blockquote>
<ul>
<li><p>3、更改存储引擎   </p>
<blockquote>
<p>　mysql&gt;ALTER TABLE 表名 ENGINE = 引擎类型；<br>　eg：mysql&gt;alter table table1 engine = MyISAM；   </p>
</blockquote>
</li>
<li><p>4、更改charset   </p>
</li>
</ul>
<blockquote>
<p>　mysql&gt;ALTER TABLE 表名 charset = 编码类型；<br>　eg：mysql&gt;alter table table1 charset = utf8；   </p>
</blockquote>
<h3 id="MySQL_u51FA_u73B0_u4E71_u7801_u539F_u56E0"><a href="#MySQL_u51FA_u73B0_u4E71_u7801_u539F_u56E0" class="headerlink" title="MySQL出现乱码原因"></a>MySQL出现乱码原因</h3><ul>
<li><strong>存入MySQL经历的编码转换过程</strong>   </li>
</ul>
<blockquote>
<p><img src="http://7xqrxz.com1.z0.glb.clouddn.com/MySQL%E5%AD%98%E5%85%A5%E7%BC%96%E7%A0%81%E8%BF%87%E7%A8%8B.jpg" alt="存入转换图">   </p>
</blockquote>
<p>上图中有3次编码/解码的过程（红色箭头）。三个红色箭头分别对应：客户端编码(1次)，MySQL Server解码(2次)，Client编码向表编码的转换(3次)。其中Terminal可以是一个Bash，一个web页面又或者是一个APP。本文中我们假定Bash是我们的Terminal，即用户端的输入和展示界面。图中每一个框格对应的行为如下：   </p>
<blockquote>
<p>　1、在terminal中使用输入法输入；<br>　2、terminal根据字符编码转换成二进制流；<br>　3、二进制流通过MySQL客户端传输到MySQL Server；<br>　4、Mysql Server通过character-set-client解码；<br>　5、判断character-set-client和目标表的charset是否一致；<br>　6、如果不一致则进行一次从client-charset到table-charset的一次字符编码转换；<br>　7、将转换后的字符编码二进制流存入文件中；   </p>
</blockquote>
<ul>
<li><strong>从MySQL表中取出数据经历的编码转换过程</strong>   </li>
</ul>
<blockquote>
<p><img src="http://7xqrxz.com1.z0.glb.clouddn.com/MySQL%E5%8F%96%E5%87%BA%E7%BC%96%E7%A0%81%E8%BF%87%E7%A8%8B.jpg" alt="取出转码过程">   </p>
</blockquote>
<p>上图中也有3次编码/解码的过程（红色箭头）。上图中三个红色箭头分别对应：客户端解码展示（3），MySQL Server根据character-set-client编码（2），表编码向character-set-client编码的转换（1）。   </p>
<blockquote>
<p>　1、从文件读出二进制数据流；<br>　2、用表字符集编码（charset）进行解码；<br>　3、将数据转换为character-set-client的编码；<br>　4、使用character-set-client编码为二进制流；<br>　5、Server通过网络传输到远端client；<br>　6、client通过bash配置的字符编码展示查询结果；   </p>
</blockquote>
<p><strong>说明：</strong>由以上解释可知，只要做到“三位一体”，即客户端，MySQL character-set-client，table charset三个字符集完全一致就可以保证一定不会有乱码出现了。   </p>
<ul>
<li><strong>关于错进错出</strong>   </li>
</ul>
<p>　在MySQL中最常见的乱码问题的起因就是把错进错出神话。所谓的错进错出就是，客户端(web或shell)的字符编码和最终表的字符编码格式不同，但是只要保证存和取两次的字符集编码一致就仍然能够获得没有乱码的输出的这种现象。但是，错进错出并不是对于任意两种字符集编码的组合都是有效的。我们假设客户端的编码是C，MySQL表的字符集编码是S。那么为了能够错进错出，需要满足以下两个条件   </p>
<blockquote>
<p>MySQL接收请求时，从C编码后的二进制流在被S解码时能够无损；<br>MySQL返回数据是，从S编码后的二进制流在被C解码时能够无损；   </p>
</blockquote>
<ul>
<li><strong>关于MySQL的编码解码</strong>   </li>
</ul>
<p>　既然系统之间是按照二进制流进行传输的，那直接把这串二进制流直接存入表文件就好啦。为什么在存储之前还要进行两次编解码的操作呢？   </p>
<blockquote>
<p>1、Client to MySQL Server的编解码的原因是MySQL需要对传来的二进制流做语法和词法解析。如果不做编码解析和校验，我们甚至没法知道传来的一串二进制流是insert还是update。<br>2、File to Engine的编解码是为知道二进制流内的分词情况。举个简单的例子：我们想要从表里取出某个字段的前两个字符，执行了一句形如select left(col,2) from table的语句，存储引擎从文件读入该column的值是E4B8ADE69687。那么这个时候如果我们按照GBK把这个值分割成E4B8,ADE6,9687三个字，并那么返回客户端的值就应该是E4B8ADE6；如果按照UTF8分割成E4B8AD,E69687，那么就应该返回E4B8ADE69687两个字。可见，如果在从数据文件读入数据后，不进行编解码的话在存储引擎内部是无法进行<strong>字符级别</strong>的操作的。   </p>
</blockquote>
<h3 id="MySQL_u7684_u5F15_u64CE"><a href="#MySQL_u7684_u5F15_u64CE" class="headerlink" title="MySQL的引擎"></a>MySQL的引擎</h3><ul>
<li><strong>存储引擎是什么？</strong>   </li>
</ul>
<p>　MySQL中的数据用各种不同的技术存储在文件(或者内存)中。这些技术中的每一种技术都使用不同的存储机制、索引技巧、锁定水平并且最终提供广泛的不同的功能和能力。通过选择不同的技术，你能够获得额外的速度或者功能，从而改善你的应用的整体功能。<br>　例如，如果你在研究大量的临时数据，你也许需要使用内存存储引擎。内存存储引擎能够在内存中存储所有的表格数据。又或者，你也许需要一个支持事务处理的数据库(以确保事务处理不成功时数据的回退能力)。这些不同的技术以及配套的相关功能在MySQL中被称作存储引擎(也称作表类型)。MySQL默认的存储引擎是InnoDB，可使用“show engines”查看；   </p>
<blockquote>
<p><img src="http://7xqrxz.com1.z0.glb.clouddn.com/mysql%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E.jpg" alt="mysql存储引擎">   </p>
</blockquote>
<ul>
<li><strong>MyISAM与InnoDB区别</strong>   </li>
</ul>
<blockquote>
<p>1、MyISAM类型不支持事务处理等高级处理，而InnoDB类型支持；<br>　<em>所谓事务处理，就是原子性操作。<br>打个比方，支持事务处理的Innodb表，建设一个中，发帖是给积分的。你发了一个帖子执行一个insert语句，来插入帖子内容，插入后就要执行一个update语句来增加你的积分。假设一种特殊情况突然发生，insert成功了，update操作却没有被执行。也就是说你发了帖子却没有增加相应的积分。这就会造成用户不满。如果使用了事务处理，insert和update都放入到事务中去执行，这个时候，只有当insert和update两条语句都执行生成的时候才会将数据更新、写入其中，如果其中任何一条语句失败，那么就会回滚为初始状态，不执行写入。这样就保证了insert和update肯定是一同执行的。</em>   </p>
<p>2、MyISAM类型不支持外键，而InnoDB支持；<br>3、在执行数据库写入操作时（insert，update，delete），MyISAM会锁表，而InnoDB会锁行；<br>　<em>通俗点说，就是你执行了一个update语句，那么mysiam表会将整个表都锁住，其他的insert和delete、update都会被拒之门外，等到这个update语句执行完成后才会被依次执行。而锁行，就是说，你执行update语句是，只会将这一条记录进行锁定，只有针对这条记录的其他写入、更新操作会被阻塞并等待这条update语句执行完毕后再执行，针对其他记录的写入操作不会有影响。</em>   </p>
</blockquote>
<p>　因此，当你的数据库有大量的写入、更新操作而查询比较少或者数据完整性要求比较高的时候就选择innodb表。当你的数据库主要以查询为主，相比较而言更新和写入比较少，并且业务方面数据完整性要求不那么严格，就选择mysiam表。因为mysiam表的查询操作效率和速度都比innodb要快</p>
<h3 id="u53C2_u8003"><a href="#u53C2_u8003" class="headerlink" title="参考"></a>参考</h3><blockquote>
<p><a href="http://blog.jobbole.com/84906/" target="_blank" rel="external">10分钟学会理解和解决MySQL乱码问题</a><br><a href="http://c.biancheng.net/cpp/html/1458.html" target="_blank" rel="external">C语言中文网</a><br><a href="http://www.dedecms.com/knowledge/data-base/mysql/2012/0819/7217.html" target="_blank" rel="external">白话讲MyISAM和InnoDB的区别</a></p>
</blockquote>
<p>　   </p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u5E38_u7528_u5B57_u6BB5_u7C7B_u578B_28type_29"><a href="#u5E38_u7528_u5B57_u6BB5_u7C7B_u578B_28type_29" class="headerlink" title="常用字段类型(type)"></a>常用字段类型(type)</h3><p>MySQL中的数据类型大致可分为：日期和时间，数值以及字符串。各类型的详细介绍如下所示   </p>
<ul>
<li><strong>日期和时间数据类型</strong>   </li>
</ul>
<blockquote>
<p><img src="http://7xqrxz.com1.z0.glb.clouddn.com/mysql%E4%B9%8B%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4.jpg" alt="日期时间">   </p>
</blockquote>]]>
    
    </summary>
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
      <category term="MySQL数据库开发" scheme="http://yoursite.com/categories/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mysql数据库的导入与导出]]></title>
    <link href="http://yoursite.com/2016/02/16/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%AF%BC%E5%85%A5%E4%B8%8E%E5%AF%BC%E5%87%BA/"/>
    <id>http://yoursite.com/2016/02/16/Mysql数据库的导入与导出/</id>
    <published>2016-02-16T12:54:46.000Z</published>
    <updated>2016-02-16T13:39:40.474Z</updated>
    <content type="html"><![CDATA[<h3 id="u6570_u636E_u5E93_u5BFC_u51FA"><a href="#u6570_u636E_u5E93_u5BFC_u51FA" class="headerlink" title="数据库导出"></a>数据库导出</h3><p><strong>数据库的导出无需登录MySQL服务器</strong> </p>
<ul>
<li>一、导出整个数据库，命令格式如下，如果导出的数据库在本地，则-h（服务器地址）参数可以不用：   </li>
</ul>
<blockquote>
<p>　$mysqldump　-h <em>serverIp</em>　-u <em>username</em>　-p <em>password</em>　数据库名 &gt; 目录/ｏputfile_name.sql<br>　h参数表示远程服务器地址，若导出的是本地数据库，可不添加；<br>　u参数表示用户名；<br>　p参数表示用户密码；<br>　eg：mysqldump -h120.25.12.23 -uwjw -pwjw database1 &gt; /home/wanjianwei/database.sql  </p>
</blockquote>
<ul>
<li>二、导出某个表，命令格式如下：</li>
</ul>
<blockquote>
<p>　$mysqldump　-h <em>serverIp</em>　-u <em>username</em>　-p<em>password</em> 数据库名 表名 &gt; 目录/outfile_name.sql<br>　参数解释如上所示；<br>　eg:mysqldump -uwjw -pwjw database1 table1 &gt; /home/wanjianwei/database1.sql   </p>
</blockquote>
<a id="more"></a>
<h3 id="u6570_u636E_u5E93_u7684_u5BFC_u5165"><a href="#u6570_u636E_u5E93_u7684_u5BFC_u5165" class="headerlink" title="数据库的导入"></a>数据库的导入</h3><p><strong>数据库的导入要先登录MySQL服务器，常用source命令，步骤如下所示</strong>   </p>
<ul>
<li><p>先登录MySQL服务器   </p>
<blockquote>
<p>　mysql　-h120.23.123.212　-uwjw　-pwjw<br>　这是本地直接登录远程数据库，也可以利用putty等ssh工具登录；</p>
</blockquote>
</li>
<li><p>选定要导入数据的数据库</p>
<blockquote>
<p>　mysql&gt;use　database1;   </p>
</blockquote>
</li>
<li><p>使用source命令导入本地的sql文件</p>
</li>
</ul>
<blockquote>
<p>　mysql&gt;source　/home/wanjianwei/database1.sql；</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u6570_u636E_u5E93_u5BFC_u51FA"><a href="#u6570_u636E_u5E93_u5BFC_u51FA" class="headerlink" title="数据库导出"></a>数据库导出</h3><p><strong>数据库的导出无需登录MySQL服务器</strong> </p>
<ul>
<li>一、导出整个数据库，命令格式如下，如果导出的数据库在本地，则-h（服务器地址）参数可以不用：   </li>
</ul>
<blockquote>
<p>　$mysqldump　-h <em>serverIp</em>　-u <em>username</em>　-p <em>password</em>　数据库名 &gt; 目录/ｏputfile_name.sql<br>　h参数表示远程服务器地址，若导出的是本地数据库，可不添加；<br>　u参数表示用户名；<br>　p参数表示用户密码；<br>　eg：mysqldump -h120.25.12.23 -uwjw -pwjw database1 &gt; /home/wanjianwei/database.sql  </p>
</blockquote>
<ul>
<li>二、导出某个表，命令格式如下：</li>
</ul>
<blockquote>
<p>　$mysqldump　-h <em>serverIp</em>　-u <em>username</em>　-p<em>password</em> 数据库名 表名 &gt; 目录/outfile_name.sql<br>　参数解释如上所示；<br>　eg:mysqldump -uwjw -pwjw database1 table1 &gt; /home/wanjianwei/database1.sql   </p>
</blockquote>]]>
    
    </summary>
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
      <category term="MySQL数据库开发" scheme="http://yoursite.com/categories/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mysql数据库之用户管理及密码修改]]></title>
    <link href="http://yoursite.com/2016/02/16/Mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B9%8B%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E5%8F%8A%E5%AF%86%E7%A0%81%E4%BF%AE%E6%94%B9/"/>
    <id>http://yoursite.com/2016/02/16/Mysql数据库之用户管理及密码修改/</id>
    <published>2016-02-16T11:18:42.000Z</published>
    <updated>2016-02-16T13:39:52.666Z</updated>
    <content type="html"><![CDATA[<h3 id="u4FEE_u6539_u6570_u636E_u5E93_u7528_u6237_u5BC6_u7801_uFF1A"><a href="#u4FEE_u6539_u6570_u636E_u5E93_u7528_u6237_u5BC6_u7801_uFF1A" class="headerlink" title="修改数据库用户密码："></a>修改数据库用户密码：</h3><ul>
<li><p>如果你的root用户现在没有密码，我们希望将密码设置为abcdef，那么可输入如下命令（无需先登录mysql服务器):     </p>
<blockquote>
<p>　$mysqladmin　-u　root　password　abcdef   </p>
</blockquote>
</li>
<li><p>如果root用户已经有密码（abcdef），而我们想修改它为123456，则可输入如下命令(无需先登录mysql服务器):   </p>
<blockquote>
<p>　$mysqladmin　-uroot　-pabcdef　password　123456   </p>
</blockquote>
</li>
<li><p>直接使用SET　PASSWORD语句修改或设置指定用户的密码，命令格式如下所示(需要先登录mysql服务器,但无需使用FLUSH PRIVILEGES)：   </p>
<blockquote>
<p>　mysql&gt;SET　PASSWORD　FOR　wjw@’%’　=　PASSWORD(‘123456’)；  </p>
<a id="more"></a> 
<h3 id="u6DFB_u52A0_u6570_u636E_u5E93_u7528_u6237"><a href="#u6DFB_u52A0_u6570_u636E_u5E93_u7528_u6237" class="headerlink" title="添加数据库用户"></a>添加数据库用户</h3></blockquote>
</li>
<li><p>操作mysql.user表，直接在其中插入一个用户信息，需要使用FLUSH PRIVILEGES，使操作生效，命令格式如下：   </p>
<blockquote>
<p>　mysql&gt;INSERT　INTO　mysql.user(Host,User,Password)　VALUES(‘%’,’wjw’,PASSWORD(‘123456’))；<br>　mysql&gt;FLUSH　PRIVILEGES；　　　</p>
</blockquote>
</li>
<li><p>使用GRANT … IDENTIFIED BY权限管理语句，命令格式如下所示：</p>
<blockquote>
<p>　mysql&gt;GRANT　USAGE　ON　＊．＊　TO　wjw@’%’　IDENTIFIED　BY　‘123456’；   </p>
</blockquote>
</li>
</ul>
<p>　这时无需采用PASSWORD（）函数对密码加密，该语句自动采用该函数对设置的密码进行加密。另外也不必使用FLUSH PRIVILEGES语句使添加的用户生效；   </p>
<h3 id="u5220_u9664_u6570_u636E_u5E93_u7528_u6237"><a href="#u5220_u9664_u6570_u636E_u5E93_u7528_u6237" class="headerlink" title="删除数据库用户"></a>删除数据库用户</h3><ul>
<li>直接操作mysql.user表，从中删除指定的用户，并且FLUSH　PRIVILEGES使操作生效，命令格式如下：</li>
</ul>
<blockquote>
<p>　mysql&gt;DELETE　FROM　mysql.user　WHERE　User =　‘wjw’；<br>　mysql&gt;FLUSH　PRIVILEGES；   </p>
</blockquote>
<h3 id="u6570_u636E_u5E93_u7BA1_u7406_u64CD_u4F5C"><a href="#u6570_u636E_u5E93_u7BA1_u7406_u64CD_u4F5C" class="headerlink" title="数据库管理操作"></a>数据库管理操作</h3><ul>
<li>查看MySQL的安装版本 (无需登录先MySQL服务器)  </li>
</ul>
<blockquote>
<p>　$mysqladmin -uroot -p123456 version   </p>
</blockquote>
<ul>
<li>查看MySQL当前状态   </li>
</ul>
<blockquote>
<p>　$mysqladmin -uroot -p123456 status   </p>
</blockquote>
<ul>
<li>更新或重载privilege表或者grants表</li>
</ul>
<blockquote>
<p>　$mysqladmin -uroot -p123456 reload<br>　$mysqladmin -uroot -p123456 refresh   </p>
</blockquote>
<ul>
<li>关闭MySQL服务器的安全方法</li>
</ul>
<blockquote>
<p>　$mysqladmin -uroot -p123456 shutdown   </p>
</blockquote>
<ul>
<li>查看所有的MySQL服务器状态变量及其当前值   </li>
</ul>
<blockquote>
<p><img src="http://7xqrxz.com1.z0.glb.clouddn.com/mysql%E4%B9%8B%E7%8A%B6%E6%80%81%E5%8F%98%E9%87%8F%E5%9B%BE.jpg" alt="状态变量图">  </p>
</blockquote>
<ul>
<li>显示mysql数据库当前正在进行的所有查询操作或进程</li>
</ul>
<blockquote>
<p><img src="http://7xqrxz.com1.z0.glb.clouddn.com/mysql%E4%B9%8B%E8%BF%9B%E7%A8%8B%E5%9B%BE.jpg" alt="进程图">   </p>
</blockquote>
<ul>
<li>显示mysql服务器当前的系统变量及其值  </li>
</ul>
<blockquote>
<p><img src="http://7xqrxz.com1.z0.glb.clouddn.com/mysql%E4%B9%8B%E7%B3%BB%E7%BB%9F%E5%8F%98%E9%87%8F%E5%9B%BE.jpg" alt="系统变量"></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u4FEE_u6539_u6570_u636E_u5E93_u7528_u6237_u5BC6_u7801_uFF1A"><a href="#u4FEE_u6539_u6570_u636E_u5E93_u7528_u6237_u5BC6_u7801_uFF1A" class="headerlink" title="修改数据库用户密码："></a>修改数据库用户密码：</h3><ul>
<li><p>如果你的root用户现在没有密码，我们希望将密码设置为abcdef，那么可输入如下命令（无需先登录mysql服务器):     </p>
<blockquote>
<p>　$mysqladmin　-u　root　password　abcdef   </p>
</blockquote>
</li>
<li><p>如果root用户已经有密码（abcdef），而我们想修改它为123456，则可输入如下命令(无需先登录mysql服务器):   </p>
<blockquote>
<p>　$mysqladmin　-uroot　-pabcdef　password　123456   </p>
</blockquote>
</li>
<li><p>直接使用SET　PASSWORD语句修改或设置指定用户的密码，命令格式如下所示(需要先登录mysql服务器,但无需使用FLUSH PRIVILEGES)：   </p>
<blockquote>
<p>　mysql&gt;SET　PASSWORD　FOR　wjw@’%’　=　PASSWORD(‘123456’)；  </p>]]>
    
    </summary>
    
      <category term="Mysql" scheme="http://yoursite.com/tags/Mysql/"/>
    
      <category term="MySQL数据库开发" scheme="http://yoursite.com/categories/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo使用常见问题汇总]]></title>
    <link href="http://yoursite.com/2016/02/09/Hexo%E4%BD%BF%E7%94%A8%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>http://yoursite.com/2016/02/09/Hexo使用常见问题汇总/</id>
    <published>2016-02-09T13:40:58.000Z</published>
    <updated>2016-02-16T13:43:25.896Z</updated>
    <content type="html"><![CDATA[<ul>
<li>一、使用Next主题时，Hexo博客的首页只显示一篇文章</li>
</ul>
<blockquote>
<p>解决方法：hexo　clean<br>　　　　　hexo　g<br>　　　　　hexo　g<br>　　　　　hexo　d  </p>
<p>如上所示，使用“hexo　clean”指令清楚缓存后，使用“hexo　g”命令重复渲染两次就能正常显示了；  </p>
</blockquote>
<ul>
<li><p>二、使用“hexo　n　“filename””生成新的md文件后，若想要编辑文章的front-matter，注意front-matter必须在“—”限定符之间，而且首尾字段不能和“—”换行符之间有空行，另外“—”要置于行首，末尾不能有空格，否则都会造成Hexo解析错误；  </p>
</li>
<li><p>三、Hexo中使用markdown语法编辑博客，必须按照严格的markdown语法，比如解析“#”标题，最后一个“#”后必须加空格，才能在Hexo中正确显示，而这也是markdown推荐的写法，实际上有些情况下，不加空格也可以解析，只是Hexo中不允许；  </p>
</li>
<li><p>四、如果要给自己部署在github上的Hexo绑定自己的个人域名，一般会选择在repository中的master分支中新建一个CNAME文件，并填入自己要绑定的域名，但这里有一个坑要注意，master分支里的内容都是自动生成的，而且会完全覆盖之前的内容，所以repository中的CNAME文件会在每次部署后消失。如果不想每次部署后都在repository重新添加一个CNAME文件，我们可以下载<a href="https://github.com/leecrossley/hexo-generator-cname" target="_blank" rel="external">hexo-generator-cname</a>,安装及配置官网上有。这时每次执行“hexo　g”之后会在public目录中生成一个CNAME文件，把你的域名加进去再部署就行了（记住，每次执行完“hexo　ｇ”命令后一定要将你的域名写入CNAME文件中，因为每次执行“hexo　g”命令，public目录中的CNAME文件都会被覆盖）。</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[在辛苦利用Hexo搭建好自己的个人博客后，本想着就此可以无忧无虐的编写自己的博客了，但不想再试水写第一篇博客时，就遇到了一些问题，经过在网上的一番查找，终于是找到了答案，故想把它们总结记录下来，以供读者及自己日后查阅，避免再犯类似的错误。该博客目前处于更新中，我会把自己日常使用Hexo博客所遇到的问题一并记录在此。]]>
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="Next" scheme="http://yoursite.com/tags/Next/"/>
    
      <category term="Hexo教程" scheme="http://yoursite.com/categories/Hexo%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hexo常用命令总结]]></title>
    <link href="http://yoursite.com/2016/02/07/hexo%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2016/02/07/hexo语法/</id>
    <published>2016-02-07T05:59:28.000Z</published>
    <updated>2016-02-09T14:32:46.617Z</updated>
    <content type="html"><![CDATA[<h3 id="u5E38_u7528_u7B80_u5199_u547D_u4EE4"><a href="#u5E38_u7528_u7B80_u5199_u547D_u4EE4" class="headerlink" title="常用简写命令"></a>常用简写命令</h3><blockquote>
<p>hexo　n　“filename”　==　hexo　new　“filename”　==　hexo　new　post　“filename”　<em>#该命令执行后会在./source/_post目录下生成一个名为“filename”的md文件，可供我们输入博客内容</em>；<br> hexo　p　==　hexo　publish　<em>#生成草稿</em>；<br> hexo　g　==　hexo　generate　<em>#在本地生成静态网页至public目录下</em>；<br> hexo　s　==　hexo　server　<em>#启动本地服务预览，打开浏览器，输入“http：//localhost：4000”即可查看编辑效果</em>；<br> hexo　ｄ　==　hexo　deploy　<em>#部署到github等云空间</em>；<br> hexo　new　page　“pageName”　<em>#新建页面，该命令执行后会在source目录下生成一个已“pageName”命名的文件夹</em>；  </p>
</blockquote>
<a id="more"></a>
<h3 id="front-matter_u8BBE_u7F6E"><a href="#front-matter_u8BBE_u7F6E" class="headerlink" title="front-matter设置"></a>front-matter设置</h3><p>当我们执行“hexo　new ‘我的博客’”命令，新建一个博客时，打开对应生成的md文件，里面或许已经填入了基本的front-matter字段（eg：title，date），我们可以在这里设置博客的基本情况，如下图所示：  </p>
<blockquote>
<p><img src="http://7xqrxz.com1.z0.glb.clouddn.com/hexo6.jpg" alt="front-matter设置"></p>
</blockquote>
<p><strong>以上各个字段的解释如下</strong>：  </p>
<blockquote>
<p>title： 博客的名称；<br>layout： layout是可选参数，默认值为post。我们可以在到scaffolds目录下查看有哪些layout类型，这些文件名称就是layout名称。当然你可以添加自己的layout，方法就是添加一个文件即可，同时你也可以编辑现有的layout，比如post的layout默认是hexo\scaffolds\post.md<br>date：博客建立的时间<br>comments：是否该博客下有评论，默认是true，前提是我们已经为自己的Hexo博客添加了评论系统(如多说评论)<br> categories：所要编辑博客的分类目录，可以为空<br> tags：文章标签，可为空，多标签请用格式[tag1，tag2，tag3]<br> keywords： 博客的关键字<br> description： 本博客的简短描述  </p>
</blockquote>
<p>当然，还有其它的一些可添加字段，本文只列出了一些常见的。更详细的，我们可以查看Hexo的官方资料。<em>#注意：front-matter中每个字段名称的冒号后面要有空格，否则Hexo无法解析</em>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u5E38_u7528_u7B80_u5199_u547D_u4EE4"><a href="#u5E38_u7528_u7B80_u5199_u547D_u4EE4" class="headerlink" title="常用简写命令"></a>常用简写命令</h3><blockquote>
<p>hexo　n　“filename”　==　hexo　new　“filename”　==　hexo　new　post　“filename”　<em>#该命令执行后会在./source/_post目录下生成一个名为“filename”的md文件，可供我们输入博客内容</em>；<br> hexo　p　==　hexo　publish　<em>#生成草稿</em>；<br> hexo　g　==　hexo　generate　<em>#在本地生成静态网页至public目录下</em>；<br> hexo　s　==　hexo　server　<em>#启动本地服务预览，打开浏览器，输入“http：//localhost：4000”即可查看编辑效果</em>；<br> hexo　ｄ　==　hexo　deploy　<em>#部署到github等云空间</em>；<br> hexo　new　page　“pageName”　<em>#新建页面，该命令执行后会在source目录下生成一个已“pageName”命名的文件夹</em>；  </p>
</blockquote>]]>
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="Hexo教程" scheme="http://yoursite.com/categories/Hexo%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[markdown语法教程]]></title>
    <link href="http://yoursite.com/2016/02/03/markdown-note/"/>
    <id>http://yoursite.com/2016/02/03/markdown-note/</id>
    <published>2016-02-03T08:15:27.000Z</published>
    <updated>2016-02-06T13:04:33.234Z</updated>
    <content type="html"><![CDATA[<p><strong>说明：</strong>本文原载与<a href="http://www.ituring.com.cn/article/504" target="_blank" rel="external">图灵社区</a>网站,本次转载仅仅是为了方便自己学习，加深自己对markdown语法的理解；</p>
<h1 id="Markdown_3A_Syntax"><a href="#Markdown_3A_Syntax" class="headerlink" title="Markdown: Syntax"></a>Markdown: Syntax</h1><h2 id="overview">概述</h2>

<h3 id="philosophy">哲学</h3>

<p>Markdown 的目标是实现「易读易写」。</p>
<p>不过最需要强调的便是它的可读性。一份使用 Markdown 格式撰写的文档应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 <a href="http://docutils.sourceforge.net/mirror/setext.html" target="_blank" rel="external">Setext</a>、<a href="http://www.aaronsw.com/2002/atx/" target="_blank" rel="external">atx</a>、<a href="http://textism.com/tools/textile/" target="_blank" rel="external">Textile</a>、<a href="http://docutils.sourceforge.net/rst.html" target="_blank" rel="external">reStructuredText</a>、<a href="http://www.triptico.com/software/grutatxt.html" target="_blank" rel="external">Grutatext</a> 和 <a href="http://ettext.taint.org/doc/" target="_blank" rel="external">EtText</a>，然而最大灵感来源其实是纯文本的电子邮件格式。</p>
<p>因此 Markdown 的语法全由标点符号所组成，并经过严谨慎选，是为了让它们看起来就像所要表达的意思。像是在文字两旁加上星号，看起来就像*强调*。Markdown 的列表看起来，嗯，就是列表。假如你用过电子邮件，区块引言看起来就真的像是引用一段文字。</p>
<h3 id="html">行内 HTML</h3>

<p>Markdown 的语法有个主要的目的：用来作为一种网络内容的<em>写作</em>用语言。</p>
<p>Markdown 不是要来取代 HTML，甚至也没有要和它相似，它的语法种类不多，只和 HTML 的一部分有关系，重点<em>不是</em>要创造一种更容易写作 HTML 文档的语法，我认为 HTML 已经很容易写了，Markdown 的重点在于，它能让文档更容易阅读、编写。HTML 是一种<em>发布</em>的格式，Markdown 是一种<em>编写</em>的格式，因此，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。</p>
<p>不在 Markdown 涵盖范围之外的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。</p>
<p>只有区块元素──比如 <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code> 等标签，必需在前后加上空白，以利与内容区隔。而且这些（元素）的开始与结尾标签，不可以用 tab 或是空白来缩排。Markdown 的产生器有智能判断，可以避免在区块标签前后加上没有必要的 <code>&lt;p&gt;</code> 标签。</p>
<p>举例来说，在 Markdown 文档里加上一段 HTML 表格：</p>
<pre><code>This is a regular paragraph.

&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;Foo&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;

This is another regular paragraph.
</code></pre><p>请注意，Markdown 语法在 HTML 区块标签中将不会被进行处理。例如，无法在 HTML 区块内使用 Markdown 形式的<code>*强调*</code>。</p>
<p>HTML 的区段标签如 <code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<code>&lt;del&gt;</code> 则不受限制，可以在 Markdown 的段落、列表或是标题里任意使用。依照个人习惯，甚至可以不用Markdown 格式，而采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的  <code>&lt;a&gt;</code> 或 <code>&lt;img&gt;</code> 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图片标示语法。</p>
<p>HTML 区段标签和区块标签不同，在区段标签的范围内， Markdown 的语法是有效的。</p>
<h3 id="autoescape">特殊字符自动转换</h3>

<p>在 HTML 文档中，有两个字符需要特殊处理： <code>&lt;</code> 和 <code>&amp;</code> 。 <code>&lt;</code> 符号用于起始标签，<code>&amp;</code> 符号则用于标记 HTML 实体，如果只是想要使用这些符号，必须要使用实体的形式，像是 <code>&amp;lt;</code> 和 <code>&amp;amp;</code>。</p>
<p><code>&amp;</code> 符号其实很让写作网络文档的人很困扰，如果要输入「AT&amp;T」 ，必须要写成「<code>AT&amp;amp;T</code>」 ，还得转换网址内的 <code>&amp;</code> 符号，如果要链接到：</p>
<pre><code>http://images.google.com/images?num=30&amp;q=larry+bird
</code></pre><p>必须要把网址转成：</p>
<pre><code>http://images.google.com/images?num=30&amp;amp;q=larry+bird
</code></pre><p>才能放到链接标签的 <code>href</code> 属性里。不用说也知道这很容易忘记，这也可能是 HTML 标准检查所检查到的错误中，数量最多的。</p>
<p>Markdown 允许直接使用这些符号，但是要小心转义字符的使用，如果是在HTML 实体中使用 <code>&amp;</code> 符号的话，它不会被转换，而在其它情形下，它则会被转换成 <code>&amp;amp;</code>。所以如果要在文档中插入一个著作权的符号，可以这样写：</p>
<pre><code>&amp;copy;
</code></pre><p>Markdown 将不会对这段文字做修改，但是如果这样写：</p>
<pre><code>AT&amp;T
</code></pre><p>Markdown 就会将它转为：</p>
<pre><code>AT&amp;amp;T
</code></pre><p>类似的状况也会发生在 <code>&lt;</code> 符号上，因为 Markdown 支持 <a href="/#html">行内 HTML</a> ，如果是使用 <code>&lt;</code> 符号作为 HTML 标签使用，那 Markdown 也不会对它做任何转换，但是如果是写：</p>
<pre><code>4 &lt; 5
</code></pre><p>Markdown 将会把它转换为：</p>
<pre><code>4 &amp;lt; 5
</code></pre><p>不过需要注意的是，code 范围内，不论是行内还是区块， <code>&lt;</code> 和 <code>&amp;</code> 两个符号都<em>一定</em>会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，要把所有的 <code>&lt;</code> 和 <code>&amp;</code> 都转换为 HTML 实体，才能在 HTML 文档里面写出 HTML code。）</p>
<hr>
<h2 id="block">区块元素</h2>


<h3 id="p">段落和换行</h3>

<p>一个段落是由一个以上相连接的行句组成，而一个以上的空行则会切分出不同的段落（空行的定义是显示上看起来像是空行，便会被视为空行。比方说，若某一行只包含空白和 tab，则该行也会被视为空行），一般的段落不需要用空白或断行缩排。</p>
<p>「一个以上相连接的行句组成」这句话其实暗示了 Markdown 允许段落内的强迫断行，这个特性和其他大部分的 text-to-HTML 格式不一样（包括 MovableType 的「Convert Line Breaks」选项），其它的格式会把每个断行都转成 <code>&lt;br /&gt;</code> 标签。</p>
<p>如果<em>真的</em>想要插入 <code>&lt;br /&gt;</code> 标签，在行尾加上两个以上的空白，然后按 enter。</p>
<p>是的，这确实需要花比较多功夫来插入 <code>&lt;br /&gt;</code> ，但是「每个换行都转换为 <code>&lt;br /&gt;</code>」的方法在 Markdown 中并不适合， Markdown 中 email 式的 <a href="/#blockquote">区块引言</a> 和多段落的 <a href="/#list">列表</a> 在使用换行来排版的时候，不但更好用，还更好阅读。</p>
<h3 id="header">标题</h3>

<p>Markdown 支持两种标题的语法，<a href="http://docutils.sourceforge.net/mirror/setext.html" target="_blank" rel="external">Setext</a> 和 <a href="http://www.aaronsw.com/2002/atx/" target="_blank" rel="external">atx</a> 形式。</p>
<p>Setext 形式是用底线的形式，利用 <code>=</code> （一级标题）和 <code>-</code> （二级标题），例如：</p>
<pre><code>This is an H1
=============

This is an H2
-------------
</code></pre><p>任何数量的 <code>=</code> 和 <code>-</code> 都可以有效果。</p>
<p>Atx 形式则是在行首插入 1 到 6 个 <code>#</code> ，对应到标题 1 到 6 级，例如：</p>
<pre><code># This is an H1

## This is an H2

###### This is an H6
</code></pre><p>可以选择性地「关闭」atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，就可以在行尾加上 <code>#</code>，而行尾的 <code>#</code> 数量也不用和开头一样（行首的井字数量决定标题的级别）：</p>
<pre><code># This is an H1 #

## This is an H2 ##

### This is an H3 ######
</code></pre><h3 id="blockquote">Blockquotes</h3>

<p>Markdown 使用 email 形式的区块引言，如果你很熟悉如何在 email 信件中引用，就知道怎么在 Markdown 文档中建立一个区块引言，那会看起来像是强迫断行，然后在每行的最前面加上 <code>&gt;</code> ：</p>
<pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.
&gt; 
&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
&gt; id sem consectetuer libero luctus adipiscing.
</code></pre><p>Markdown 也允许只在整个段落的第一行最前面加上 <code>&gt;</code> ：</p>
<pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.

&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.
</code></pre><p>区块引言可以有级别（例如：引言内的引言），只要根据级别加上不同数量的 <code>&gt;</code> ：</p>
<pre><code>&gt; This is the first level of quoting.
&gt;
&gt; &gt; This is nested blockquote.
&gt;
&gt; Back to the first level.
</code></pre><p>引言的区块内也可以使用其他的 Markdown 语法，包括标题、列表、程序代码区块等：</p>
<pre><code>&gt; ## This is a header.
&gt; 
&gt; 1.   This is the first list item.
&gt; 2.   This is the second list item.
&gt; 
&gt; Here&apos;s some example code:
&gt; 
&gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);
</code></pre><p>任何标准的文本编辑器都能简单地建立 email 样式的引言，例如 BBEdit ，可以选择文字后，从菜单中选择<em>增加引言级别</em>。</p>
<h3 id="list">列表</h3>

<p>Markdown 支持有序列表和无序列表。</p>
<p>无序列表使用星号、加号或是减号作为列表标记：</p>
<pre><code>*   Red
*   Green
*   Blue
</code></pre><p>等同于：</p>
<pre><code>+   Red
+   Green
+   Blue
</code></pre><p>也等同于：</p>
<pre><code>-   Red
-   Green
-   Blue
</code></pre><p>有序列表则使用数字接着一个英文句点：</p>
<pre><code>1.  Bird
2.  McHale
3.  Parish
</code></pre><p>很重要的一点是，在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：</p>
<pre><code>&lt;ol&gt;
&lt;li&gt;Bird&lt;/li&gt;
&lt;li&gt;McHale&lt;/li&gt;
&lt;li&gt;Parish&lt;/li&gt;
&lt;/ol&gt;
</code></pre><p>如果你的列表标记写成：</p>
<pre><code>1.  Bird
1.  McHale
1.  Parish
</code></pre><p>或甚至是：</p>
<pre><code>3. Bird
1. McHale
8. Parish
</code></pre><p>都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文档的列表数字和输出的结果相同，或是懒一点，可以完全不用在意数字的正确性。</p>
<p>如果使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。</p>
<p>列表项目标记通常是放在最左边，但是其实也可以缩排，最多三个空白，项目标记后面则一定要接着至少一个空白或 tab。</p>
<p>要让列表看起来更漂亮，可以把内容用固定的缩排整理好：</p>
<pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
    viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
    Suspendisse id sem consectetuer libero luctus adipiscing.
</code></pre><p>但是如果你很懒，那也不一定需要：</p>
<pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.
Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,
viverra nec, fringilla in, laoreet vitae, risus.
*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.
Suspendisse id sem consectetuer libero luctus adipiscing.
</code></pre><p>如果列表项目间用空行分开， Markdown 会把项目的内容在输出时用 <code>&lt;p&gt;</code><br>标签包起来，举例来说：</p>
<pre><code>*   Bird
*   Magic
</code></pre><p>会被转换为：</p>
<pre><code>&lt;ul&gt;
&lt;li&gt;Bird&lt;/li&gt;
&lt;li&gt;Magic&lt;/li&gt;
&lt;/ul&gt;
</code></pre><p>但是这个：</p>
<pre><code>*   Bird

*   Magic
</code></pre><p>会被转换为：</p>
<pre><code>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre><p>列表项目可以包含多个段落，每个项目下的段落都必须缩排 4 个空白或是一个 tab ：</p>
<pre><code>1.  This is a list item with two paragraphs. Lorem ipsum dolor
    sit amet, consectetuer adipiscing elit. Aliquam hendrerit
    mi posuere lectus.

    Vestibulum enim wisi, viverra nec, fringilla in, laoreet
    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum
    sit amet velit.

2.  Suspendisse id sem consectetuer libero luctus adipiscing.
</code></pre><p>如果每行都有缩排，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：</p>
<pre><code>*   This is a list item with two paragraphs.

    This is the second paragraph in the list item. You&apos;re
only required to indent the first line. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit.

*   Another item in the same list.
</code></pre><p>如果要在列表项目内放进引言，那 <code>&gt;</code> 就需要缩排：</p>
<pre><code>*   A list item with a blockquote:

    &gt; This is a blockquote
    &gt; inside a list item.
</code></pre><p>如果要放程序代码区块的话，该区块就需要缩排<em>两次</em>，也就是 8 个空白或是两个 tab：</p>
<pre><code>*   A list item with a code block:

        &lt;code goes here&gt;
</code></pre><p>当然，项目列表很可能会不小心产生，像是下面这样的写法：</p>
<pre><code>1986. What a great season.
</code></pre><p>换句话说，也就是在行首出现<em>数字-句点-空白</em>，要避免这样的状况，可以在句点前面加上反斜杠。</p>
<pre><code>1986\. What a great season.
</code></pre><h3 id="precode">程序代码区块</h3>

<p>和程序相关的写作或是标签语言原始代码通常会有已经排版好的程序代码区块，通常这些区块我们并不希望它以一般段落文档的方式去排版，而是照原来的样子显示，Markdown 会用 <code>&lt;pre&gt;</code> 和 <code>&lt;code&gt;</code> 标签来把程序代码区块包起来。</p>
<p>要在 Markdown 中建立程序代码区块很简单，只要简单地缩排 4 个空白或是 1 个 tab 就可以，例如，下面的输入：</p>
<pre><code>This is a normal paragraph:

    This is a code block.
</code></pre><p>Markdown 会转换成：</p>
<pre><code>&lt;p&gt;This is a normal paragraph:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;This is a code block.
&lt;/code&gt;&lt;/pre&gt;
</code></pre><p>这个每行一级的缩排（4 个空白或是 1 个 tab），都会被移除，例如：</p>
<pre><code>Here is an example of AppleScript:

    tell application &quot;Foo&quot;
        beep
    end tell
</code></pre><p>会被转换为：</p>
<pre><code>&lt;p&gt;Here is an example of AppleScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tell application &quot;Foo&quot;
    beep
end tell
&lt;/code&gt;&lt;/pre&gt;
</code></pre><p>一个程序代码区块会一直持续到没有缩排的那一行（或是文档结尾）。</p>
<p>在程序代码区块里面， <code>&amp;</code> 、 <code>&lt;</code> 和 <code>&gt;</code> 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始代码，只需要复制贴上，再加上缩排就可以了，剩下的 Markdown 都会帮你处理，例如：</p>
<pre><code>&lt;div class=&quot;footer&quot;&gt;
    &amp;copy; 2004 Foo Corporation
&lt;/div&gt;
</code></pre><p>会被转换为：</p>
<pre><code>&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;footer&quot;&amp;gt;
    &amp;amp;copy; 2004 Foo Corporation
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</code></pre><p>程序代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文档。</p>
<h3 id="hr">分隔线</h3>

<p>你可以在一行中用三个或以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号中间插入空白。下面每种写法都可以建立分隔线：</p>
<pre><code>* * *

***

*****

- - -

---------------------------------------
</code></pre><hr>
<h2 id="span">区段元素</h2>

<h3 id="link">链接</h3>

<p>Markdown 支持两种形式的链接语法： <em>行内</em>和<em>参考</em>两种形式。</p>
<p>不管是哪一种，链接的文字都是用 [方括号] 来标记。</p>
<p>要建立一个行内形式的链接，只要在方块括号后面马上接着括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：</p>
<pre><code>This is [an example](http://example.com/ &quot;Title&quot;) inline link.

[This link](http://example.net/) has no title attribute.
</code></pre><p>会产生：</p>
<pre><code>&lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt;
an example&lt;/a&gt; inline link.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has no
title attribute.&lt;/p&gt;
</code></pre><p>如果是要链接到同样主机的资源，可以使用相对路径：</p>
<pre><code>See my [About](/about/) page for details.   
</code></pre><p>参考形式的链接使用另外一个方括号接在链接文字的括号后面，而在第二个方括号里面要填入用以辨识链接的标签：</p>
<pre><code>This is [an example][id] reference-style link.
</code></pre><p>也可以选择性地在两个方括号中间加上空白：</p>
<pre><code>This is [an example] [id] reference-style link.
</code></pre><p>接着，在文档的任意处，可以把这个标签的链接内容定义出来：</p>
<pre><code>[id]: http://example.com/  &quot;Optional Title Here&quot;
</code></pre><p>链接定义的形式为：</p>
<ul>
<li>方括号，里面输入链接的辨识用标签</li>
<li>接着一个冒号</li>
<li>接着一个以上的空白或 tab</li>
<li>接着链接的网址</li>
<li>选择性地接着 title 内容，可以用单引号、双引号或是括号包着</li>
</ul>
<p>下面这三种链接的定义都是相同：</p>
<pre><code>[foo]: http://example.com/  &quot;Optional Title Here&quot;
[foo]: http://example.com/  &apos;Optional Title Here&apos;
[foo]: http://example.com/  (Optional Title Here)
</code></pre><p><strong>请注意：</strong>有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。</p>
<p>链接网址也可以用方括号包起来：</p>
<pre><code>[id]: &lt;http://example.com/&gt;  &quot;Optional Title Here&quot;
</code></pre><p>你也可以把 title 属性放到下一行，也可以加一些缩排，网址太长的话，这样会比较好看：</p>
<pre><code>[id]: http://example.com/longish/path/to/resource/here
    &quot;Optional Title Here&quot;
</code></pre><p>网址定义只有在产生链接的时候用到，并不会直接出现在文档之中。</p>
<p>链接辨识标签可以有字母、数字、空白和标点符号，但是并<em>不</em>区分大小写，因此下面两个链接是一样的：</p>
<pre><code>[link text][a]
[link text][A]
</code></pre><p><em>默认的链接标签</em>功能让你可以省略指定链接标签，这种情形下，链接标签和链接文字会视为相同，要用默认链接标签只要在链接文字后面加上一个空的方括号，如果要让 “Google” 链接到 google.com，可以简化成：</p>
<pre><code>[Google][]
</code></pre><p>然后定义链接内容：</p>
<pre><code>[Google]: http://google.com/
</code></pre><p>由于链接文字可能包含空白，所以这种简化的标签内也可以包含多个文字：</p>
<pre><code>Visit [Daring Fireball][] for more information.
</code></pre><p>然后接着定义链接：</p>
<pre><code>[Daring Fireball]: http://daringfireball.net/
</code></pre><p>链接的定义可以放在文档中的任何一个地方，我比较偏好直接放在链接出现段落的后面，也可以把它放在文档最后面，就像是批注一样。</p>
<p>下面是一个参考式链接的范例：</p>
<pre><code>I get 10 times more traffic from [Google] [1] than from
[Yahoo] [2] or [MSN] [3].

  [1]: http://google.com/        &quot;Google&quot;
  [2]: http://search.yahoo.com/  &quot;Yahoo Search&quot;
  [3]: http://search.msn.com/    &quot;MSN Search&quot;
</code></pre><p>如果改成用链接名称的方式写：</p>
<pre><code>I get 10 times more traffic from [Google][] than from
[Yahoo][] or [MSN][].

  [google]: http://google.com/        &quot;Google&quot;
  [yahoo]:  http://search.yahoo.com/  &quot;Yahoo Search&quot;
  [msn]:    http://search.msn.com/    &quot;MSN Search&quot;
</code></pre><p>上面两种写法都会产生下面的 HTML。</p>
<pre><code>&lt;p&gt;I get 10 times more traffic from &lt;a href=&quot;http://google.com/&quot;
title=&quot;Google&quot;&gt;Google&lt;/a&gt; than from
&lt;a href=&quot;http://search.yahoo.com/&quot; title=&quot;Yahoo Search&quot;&gt;Yahoo&lt;/a&gt;
or &lt;a href=&quot;http://search.msn.com/&quot; title=&quot;MSN Search&quot;&gt;MSN&lt;/a&gt;.&lt;/p&gt;
</code></pre><p>下面是用行内形式写的同样一段内容的 Markdown 文档，提供作为比较之用：</p>
<pre><code>I get 10 times more traffic from [Google](http://google.com/ &quot;Google&quot;)
than from [Yahoo](http://search.yahoo.com/ &quot;Yahoo Search&quot;) or
[MSN](http://search.msn.com/ &quot;MSN Search&quot;).
</code></pre><p>参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的链接却会增加到 176 个字符，如果是用纯 HTML 格式来写，会有 234 个字符，在 HTML 格式中，标签比文字还要多。</p>
<p>使用 Markdown 的参考式链接，可以让文档更像是浏览器最后产生的结果，把一些标记相关的信息移到段落文字之外，这样增加链接，文章的阅读感也不会被打断。</p>
<h3 id="em">强调</h3>

<p>Markdown 使用星号（<code>*</code>）和底线（<code>_</code>）作为标记强调字词的符号，被 <code>*</code> 或 <code>_</code> 包围的字词会被转成用 <code>&lt;em&gt;</code> 标签包围，用两个 <code>*</code> 或 <code>_</code> 包起来的话，则会被转成 <code>&lt;strong&gt;</code>，例如：</p>
<pre><code>*single asterisks*

_single underscores_

**double asterisks**

__double underscores__
</code></pre><p>会转成：</p>
<pre><code>&lt;em&gt;single asterisks&lt;/em&gt;

&lt;em&gt;single underscores&lt;/em&gt;

&lt;strong&gt;double asterisks&lt;/strong&gt;

&lt;strong&gt;double underscores&lt;/strong&gt;
</code></pre><p>你可以随便用你喜欢的样式，唯一的限制是，用什么符号开启标签，就要用什么符号结束。</p>
<p>强调也可以直接差在文字中间：</p>
<pre><code>un*frigging*believable
</code></pre><p>但是如果 <code>*</code> 和 <code>_</code> 两边都有空白的话，它们就只会被当成普通的符号。</p>
<p>如果要在文字前后直接插入普通的星号或底线，可以用反斜杠：</p>
<pre><code>\*this text is surrounded by literal asterisks\*
</code></pre><h3 id="code">程序代码</h3>

<p>如果要标记一小段行内程序代码，可以用反引号把它包起来（<code>` </code>），例如：</p>
<pre><code>Use the `printf()` function.
</code></pre><p>会产生：</p>
<pre><code>&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;
</code></pre><p>如果要在程序代码区段内插入反引号，可以用多个反引号来开启和结束程序代码区段：</p>
<pre><code>``There is a literal backtick (`) here.``
</code></pre><p>这段语法会产生：</p>
<pre><code>&lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;
</code></pre><p>程序代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样就可以在区段的一开始就插入反引号：</p>
<pre><code>A single backtick in a code span: `` ` ``

A backtick-delimited string in a code span: `` `foo` ``
</code></pre><p>会产生：</p>
<pre><code>&lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;
</code></pre><p>在程序代码区段内，<code>&amp;</code> 和方括号都会被转成 HTML 实体，这样会比较容易插入 HTML 原始代码，Markdown 会把下面这段：</p>
<pre><code>Please don&apos;t use any `&lt;blink&gt;` tags.
</code></pre><p>转为：</p>
<pre><code>&lt;p&gt;Please don&apos;t use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;
</code></pre><p>也可以这样写：</p>
<pre><code>`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.
</code></pre><p>以产生：</p>
<pre><code>&lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encoded
equivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt;
</code></pre><h3 id="img">图片</h3>

<p>很明显地，要在纯文本应用中设计一个 「自然」的语法来插入图片是有一定难度的。</p>
<p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： <em>行内</em>和<em>参考</em>。</p>
<p>行内图片的语法看起来像是：</p>
<pre><code>![Alt text](/path/to/img.jpg)

![Alt text](/path/to/img.jpg &quot;Optional title&quot;)
</code></pre><p>详细叙述如下：</p>
<ul>
<li>一个惊叹号 <code>!</code></li>
<li>接着一个方括号，里面放上图片的替换文字</li>
<li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上<br>选择性的 ‘title’ 文字。</li>
</ul>
<p>参考式的图片语法则长得像这样：</p>
<pre><code>![Alt text][id]
</code></pre><p>「id」是图片参考的名称，图片参考的定义方式则和链接参考一样：</p>
<pre><code>[id]: url/to/image  &quot;Optional title attribute&quot;
</code></pre><p>到目前为止， Markdown 还没有办法指定图片的宽高，如果需要的话，可以使用普通的 <code>&lt;img&gt;</code> 标签。</p>
<hr>
<h2 id="misc">其它</h2>

<h3 id="autolink">自动链接</h3>

<p>Markdown 支持比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接，链接的文字就和链接位置一样，例如：</p>
<pre><code>&lt;http://example.com/&gt;
</code></pre><p>Markdown 会转为：</p>
<pre><code>&lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;
</code></pre><p>自动的邮件链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以混淆一些不好的信箱地址收集机器人，例如：</p>
<pre><code>&lt;address@example.com&gt;
</code></pre><p>Markdown 会转成：</p>
<pre><code>&lt;a href=&quot;&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;
&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;
&amp;#109;&quot;&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;
&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;
</code></pre><p>在浏览器里面，这段字符串会变成一个可以点击的「address@example.com」链接。</p>
<p>（这种作法虽然可以混淆不少的机器人，但并无法全部挡下来，不过这样也比什么都不做好些。无论如何，公开你的信箱终究会引来广告信件的。）</p>
<h3 id="backslash">转义字符</h3>

<p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果想要用星号加在文字旁边的方式来做出强调效果（但不用 <code>&lt;em&gt;</code> 标签），可以在星号的前面加上反斜杠：</p>
<pre><code>\*literal asterisks\*
</code></pre><p>Markdown 支持在下面这些符号前面加上反斜杠来帮助插入普通的符号：</p>
<pre><code>\   反斜杠
`   反引号
*   星号
_   底线
{}  大括号
[]  方括号
()  括号
#   井字号
+    加号
-    减号
.   英文句点
!   惊叹号
</code></pre><h2 id="acknowledgement">感谢</h2>

<p>感谢 <a href="https://twitter.com/#!/leafy7382" target="_blank" rel="external">leafy7382</a> 协助翻译，<a href="http://iamhlb.com/" target="_blank" rel="external">hlb</a>、<a href="http://twitter.com/randylien" target="_blank" rel="external">Randylien</a> 帮忙润稿，<a href="https://twitter.com/#!/ethantw" target="_blank" rel="external">ethantw</a> 的<a href="http://ethantw.net/projects/han/" target="_blank" rel="external">汉字标准格式・CSS Reset</a>， <a href="http://kidwm.net/" target="_blank" rel="external">WM</a> 回报文字错误。</p>
]]></content>
    <summary type="html">
    <![CDATA[Markdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。]]>
    
    </summary>
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
      <category term="转载" scheme="http://yoursite.com/categories/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo+github搭建个人博客教程]]></title>
    <link href="http://yoursite.com/2016/02/03/hexo-note/"/>
    <id>http://yoursite.com/2016/02/03/hexo-note/</id>
    <published>2016-02-03T08:15:27.000Z</published>
    <updated>2016-02-07T07:19:51.034Z</updated>
    <content type="html"><![CDATA[<p>步入程序猿这一行业也有1年多的时间了，在这一年的学习与开发中，总有一些知识点忘了记，记了又忘， 一直想把它们记下来，但又不知道记在什么地方，直到最近，发现网上许多程序猿都喜欢搭个个人独立博客，用来记录记录自己的学习总结，心路历程什么的，觉得这用来装逼不错，有点高大上，于是自己也按照网上的教程鼓捣了一个个人博客，安装平台是windows下，采用的是hexo+github Pages，hexo主题是github上搜的hexo-theme-next，安装好的效果如下所示:    </p>
<blockquote>
<p><img src="http://7xqrxz.com1.z0.glb.clouddn.com/hexo1.jpg" alt="blog截图">  </p>
</blockquote>
<a id="more"></a>
<h3 id="u5B89_u88C5_u6B65_u9AA4"><a href="#u5B89_u88C5_u6B65_u9AA4" class="headerlink" title="安装步骤"></a>安装步骤</h3><ul>
<li>一、下载并安装<a href="http://git-scm.com/download/" target="_blank" rel="external">Git</a>  </li>
<li>二、下载并安装<a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a></li>
<li>三、在上述安装完成后，在window下打开cmd，输入如下命令，利用npm命令安装hexo  </li>
</ul>
<blockquote>
<p>npm install -g hexo</p>
</blockquote>
<ul>
<li>四、安装完成后，选择某个盘符下建立一个文件夹（比如在D盘建立一个文件夹，命名为HEXO）用来存放建立个人博客所需要的所有文件，并进入该文件夹，在任意位置单击鼠标右键，选择“Git　Bash　here”，打开Git　bash，输入“hexo　init”，来初始化文件夹，成功后，重新进入文件夹，会发现里面已经有文件填充了。</li>
</ul>
<blockquote>
<p><img src="http://7xqrxz.com1.z0.glb.clouddn.com/hexo2.jpg" alt="wenjainjia">  </p>
<ul>
<li>deploy_git：执行hexo　deploy命令部署到Github上的内容目录</li>
<li>public：执行hexo　generate命令，输出的静态网页内容目录</li>
<li>scaffolds：layout模板文件目录，其中的md文件可以添加编辑</li>
<li>scripts：扩展脚本目录，这里可以自定义一些JavaScript脚本</li>
<li>source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。  <blockquote>
<ul>
<li>_drafts：存储草稿文章的目录  </li>
<li>_posts：存储发布文章的目录</li>
</ul>
</blockquote>
</li>
</ul>
<ul>
<li>themes：主题文件目录</li>
<li>_config.yml：全局配置文件</li>
<li>package.json：应用程序数据，指明hexo的版本等信息  </li>
</ul>
</blockquote>
<ul>
<li>五、登录自己的github账号（没有的可<a href="https://github.com/" target="_blank" rel="external">在此</a>注册），新建一个repository，并用自己的账号名来命名。比如我的github账号为wanjianwei，则我刚刚建立的repository名字应该是wanjianwei.github.io  </li>
</ul>
<h3 id="u4E0Egithub_pages_u8FDB_u884C_u7ED1_u5B9A"><a href="#u4E0Egithub_pages_u8FDB_u884C_u7ED1_u5B9A" class="headerlink" title="与github pages进行绑定"></a>与github pages进行绑定</h3><p>　　在完成以上安装步骤后，我们事实上已经在本地搭建了一个简单的hexo博客站点，进入存放hexo相关文件的文件夹，点击鼠标右键-&gt;”Git Bash here”,分别输入以下命令后，即可打开浏览器，访问“<a href="http://localhost:4000”" target="_blank" rel="external">http://localhost:4000”</a>  即可打开hexo的Hello　World界面</p>
<blockquote>
<p>hexo　generate;<br>hexo server</p>
</blockquote>
<p>只不过此事的hexo静态博客只能在本地访问，为了可以让其他人通过网络访问我们的博客，我们必须将hexo静态博客发布到云空间上，在此我选择的是github。我们进入存放hexo相关文件的文件夹类，打开站点配置文件_config.yml，按下图所示进行配置</p>
<blockquote>
<p><img src="http://7xqrxz.com1.z0.glb.clouddn.com/hexo3.jpg" alt="hexo_config.yml"></p>
</blockquote>
<p>上述的repository要换成自己新建的repository的url，配置完成后，我们即可通过指令将我们在本地生成的hexo静态博客推送到github上了。接下来，我们需要先熟悉下hexo的一些常用<a href="http://www.tuicool.com/articles/yUreInQ" target="_blank" rel="external">指令</a></p>
<h3 id="u914D_u7F6EHexo_u4E3B_u9898"><a href="#u914D_u7F6EHexo_u4E3B_u9898" class="headerlink" title="配置Hexo主题"></a>配置Hexo主题</h3><p>　　hexo默认自带的主题外观如果无法满足我们的需求，我们可以在github上搜索符合我们需求的主题，在此推荐<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">hexo-theme-next</a>,安装方法和配置方法在其官网上都有详细描述（<a href="http://theme-next.iissnan.com/five-minutes-setup.html" target="_blank" rel="external">点击查看</a>）。  </p>
<blockquote>
<p><img src="http://7xqrxz.com1.z0.glb.clouddn.com/hexo4.jpg" alt="安装教程截图"></p>
</blockquote>
<p>它自带有三种布局主题分别为Muse，Mist，Pisces；楼主采用的是Pisces，效果在上文中已展示。需要注意的是第三方服务的安装，比如评论，统计博客浏览情况，这其实也不复杂，在Hexo的官网上也有专门的介绍(<a href="http://theme-next.iissnan.com/third-party-services.html" target="_blank" rel="external">点击查看</a>)。<br>　　在完成上述步骤后，我们就基本为自己搭建了一个独立的个人博客网站，当然，一开始我们会觉得有些不完美，但随着使用的深入，我们都能找到相应解决的方法，逐渐把它改进成自己想要的样子。在改进完善的过程中，往往需要下载一些插件，这里提供一个集合了几乎所有hexo第三方插件的地址，大家如果有需要可以按需要下载<a href="https://hexo.io/plugins/" target="_blank" rel="external">点击前往&gt;&gt;</a>；</p>
<h3 id="u57DF_u540D_u7ED1_u5B9A"><a href="#u57DF_u540D_u7ED1_u5B9A" class="headerlink" title="域名绑定"></a>域名绑定</h3><p>　　当我们将本地的hexo静态博客push到github上建立的repository时，github自动给我们分配了一个二级域名：username.github.io,其中username即是我们的账户名。我们可以通过这个域名访问我们push的Hexo博客，如果我们希望用一个新的，个人所属的域名来替换它，来增加自己的品牌效应时，步骤也非常简单。<br>　　我们可以直接在github上存放Hexo静态博客的repository中增加一个CNAME文件（注意一定要CNAME一定要大写），将自己的个人域名写入保存就行。但这样的缺点是本地每次往repository上push，CNAME都会消失，必须重新添加并编辑；<br>　　另一种方法是本地安装hexo-generator-cname插件，安装方法是进入存放Hexo相关文件的目录，打开Git Bash，输入以下命令：</p>
<blockquote>
<p>npm install hexo-generator-cname –save</p>
</blockquote>
<p>并在站点配置文件_config.yml中的Plugins字段中增加- hexo-generator-cname，如下图所示</p>
<blockquote>
<p><img src="http://7xqrxz.com1.z0.glb.clouddn.com/hexo5.jpg" alt="cname"></p>
</blockquote>
<p>从此，每次本地编辑完博客后执行“hexo　g”命令，都会在public目录中生成一个CNAME文件，我们只需打开，并写入自己的个人域名，保存后再执行“hexo　ｄ”命令。该方法也有一个问题，就是每次执行“hexo　ｇ”命令后，publish文件夹中都会重新生成一个CNAME文件，我们需要重复编辑个人的域名并保存，才能执行“hexo　ｄ”;  </p>
<h3 id="u7F16_u5199_u535A_u5BA2"><a href="#u7F16_u5199_u535A_u5BA2" class="headerlink" title="编写博客"></a>编写博客</h3><p>　　Hexo 采用markdown编写博客，进入存放Hexo相关文件的目录，打开“Git　Bash”，输入如下命令  </p>
<blockquote>
<p>hexo new post “filename”  </p>
</blockquote>
<p>便会在./source/_post目录下生成一个md文件，利用markdown书写软件打开，便可开始编辑自己的博客了，保存后依次输入以下命令，即可push到github。  </p>
<blockquote>
<p>hexo clean<br>hexo g<br>hexo d  </p>
</blockquote>
<p>如果想在本地先预览下，可以依次输入如下命令，然后打开浏览器，访问“<a href="http://localhost:4000”" target="_blank" rel="external">http://localhost:4000”</a>  </p>
<blockquote>
<p>hexo g<br>hexo server</p>
</blockquote>
<p>markdown书写软件推荐window系统下我使用的是markdowmPad 2；markdown的语法也较简单，可参考这篇<a href="http://foreverwan.vicp.net/2016/02/03/markdown-note/" target="_blank" rel="external">博文</a></p>
<h3 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h3><p>　　一些东西在我们看来很难，其实是因为我们对它不够了解，就拿搭建这个个人博客来说，网上有许多不同的实现方法，但如果我们只停留在阅读教程而不是去亲手实践，是无法体会到学习一门新技术的快乐的。重要的还是我们要有一个敢于挑战的心，一种Geek的精神，敢于钻研，就一定会有所收获的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>步入程序猿这一行业也有1年多的时间了，在这一年的学习与开发中，总有一些知识点忘了记，记了又忘， 一直想把它们记下来，但又不知道记在什么地方，直到最近，发现网上许多程序猿都喜欢搭个个人独立博客，用来记录记录自己的学习总结，心路历程什么的，觉得这用来装逼不错，有点高大上，于是自己也按照网上的教程鼓捣了一个个人博客，安装平台是windows下，采用的是hexo+github Pages，hexo主题是github上搜的hexo-theme-next，安装好的效果如下所示:    </p>
<blockquote>
<p><img src="http://7xqrxz.com1.z0.glb.clouddn.com/hexo1.jpg" alt="blog截图">  </p>
</blockquote>]]>
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="Hexo教程" scheme="http://yoursite.com/categories/Hexo%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
</feed>
